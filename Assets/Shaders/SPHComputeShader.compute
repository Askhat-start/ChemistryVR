#pragma kernel Integrate

struct Particle
{
    float pressure;
    float density;
    float3 currentForce;
    float3 velocity;
    float3 position;
};

RWStructuredBuffer<Particle> _particles;

float particleMass;
float viscosity;
float gasConstant;
float restDensity;
float boundDamping;
float radius;
float radius3;
float radius2;
float radius4;
float radius5;
float pi;
int particleLength;
float timestep = 1;

float3 boxSize;

float StdKernel(float distanceSquared)
{
    // Doyub Kim
    float x = 1.0f - distanceSquared / radius2;
    return 315.f / ( 64.f * pi * radius3 ) * x * x * x;
}


[numthreads(100,1,1)]
void Integrate (uint3 id: SV_DISPATCHTHREADID){
    float3 vel = _particles[id.x].velocity + ((_particles[id.x].currentForce/particleMass)*timestep);
    _particles[id.x].position += vel * timestep;  

    float3 topRight = boxSize/2;
    float3 bottomLeft = -boxSize/2;

    // Min Boundary Enforcments 
    if (_particles[id.x].position.x - radius < bottomLeft.x){
        vel.x *= boundDamping;
        _particles[id.x].position.x = bottomLeft.x + radius;
    }
    if (_particles[id.x].position.y - radius < bottomLeft.y){
        vel.y *= boundDamping;
        _particles[id.x].position.y = bottomLeft.y + radius;
    }
    if (_particles[id.x].position.z - radius < bottomLeft.z){
        vel.z *= boundDamping;
        _particles[id.x].position.z = bottomLeft.z + radius;
    }

    // Max Boundary Enforcments
    if (_particles[id.x].position.x + radius < topRight.x){
        vel.x *= boundDamping;
        _particles[id.x].position.x = topRight.x - radius;
    }
    if (_particles[id.x].position.y + radius < topRight.y){
        vel.y *= boundDamping;
        _particles[id.x].position.y = topRight.y - radius;
    }
    if (_particles[id.x].position.z + radius < topRight.z){
        vel.z *= boundDamping;
        _particles[id.x].position.z = topRight.z - radius;
    }

    _particles[id.x].velocity = vel;

}